(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{1414:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return l}));var n=a(18),p=a.n(n),i=a(24),o=a.n(i),m=(a(0),a(297)),c=["components"],r={};function l(e){var t=e.components,a=o()(e,c);return Object(m.mdx)("wrapper",p()({},r,a,{components:t,mdxType:"MDXLayout"}),Object(m.mdx)("h1",{id:"how-to-change-the-application-theme"},"How To Change the Application Theme"),Object(m.mdx)("p",null,"The application theme is set using the ",Object(m.mdx)("inlineCode",{parentName:"p"},"themeName")," prop in ApplicationBase. The ",Object(m.mdx)("inlineCode",{parentName:"p"},"themeName")," is used as the class name for applying styles."),Object(m.mdx)("p",null,"A ",Object(m.mdx)("inlineCode",{parentName:"p"},"terra-theme.config.js")," file must be available to enable themes. Check out the ",Object(m.mdx)("a",{parentName:"p",href:"/terra-application/guides/terra-application/theme-strategy"},"theme strategy guide")," for more information about using and applying themes."),Object(m.mdx)("pre",null,Object(m.mdx)("code",{parentName:"pre",className:"language-jsx"},"  import React from 'react';\n  import ApplicationBase from 'terra-application/lib/application-base';\n\n  const ExampleApp = () => (\n    <ApplicationBase themeName=\"example-theme-name\">\n      {...}\n    </ApplicationBase>\n  );\n\n  export default ExampleApp;\n")))}l.isMDXComponent=!0}}]);